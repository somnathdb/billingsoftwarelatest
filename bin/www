var app = require('../app');
var debug = require('debug')('lovoapp:server');
var http = require('http');
const mongoose = require('mongoose')
mongoose.Promise = global.Promise;



mongoose.connect('mongodb://rest-api:34eace700b79730481c17bab7e2657e1@cluster0-shard-00-00.uouvd.mongodb.net:27017,cluster0-shard-00-01.uouvd.mongodb.net:27017,cluster0-shard-00-02.uouvd.mongodb.net:27017/billing_sw_backend?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority').then(()=>{
  console.log("Database Successfully Connected")
})
.catch(err=>{
  console.log("error",err);
})
/***********   Redis Connection *********/

/******** Redis Connection end ***********/
var port = normalizePort(process.env.PORT || '5003');
app.set('port', port);

var server = http.createServer(app);

server.listen(port,() => {
 console.log(`Server is listening:${port}`)
})
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
